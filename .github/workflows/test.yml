name: Testing Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'

jobs:
  # Quality checks and linting
  quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript check
        run: npm run type-check

      - name: Check for unused dependencies
        run: npx depcheck

  # Unit and integration tests
  test-unit:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    needs: quality

    strategy:
      matrix:
        test-type: ['unit', 'integration']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        if: matrix.test-type == 'unit'
        run: npm run test:unit

      - name: Run integration tests
        if: matrix.test-type == 'integration'
        run: npm run test:integration
        env:
          # Add test database URL if needed
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL_TEST }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY_TEST }}

  # Coverage analysis
  coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    needs: quality

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: Check coverage thresholds
        run: npm run test:coverage:check

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: romeovs/lcov-reporter-action@v0.3.1
        with:
          lcov-file: ./coverage/lcov.info
          github-token: ${{ secrets.GITHUB_TOKEN }}

  # End-to-end tests
  test-e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: quality

    strategy:
      matrix:
        browser: [chromium, firefox, webkit]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Build application
        run: npm run build

      - name: Run E2E tests
        run: npx playwright test --project=${{ matrix.browser }}
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:8080

      - name: Upload test results
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-results-${{ matrix.browser }}
          path: |
            e2e/test-results/
            e2e/playwright-report/

  # Visual regression tests
  visual-tests:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    needs: quality
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps chromium

      - name: Build application
        run: npm run build

      - name: Run visual tests
        run: npm run test:visual
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:8080

      - name: Upload visual test results
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: visual-test-results
          path: e2e/visual-test-results/

  # Accessibility tests
  accessibility:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    needs: quality

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps chromium

      - name: Build application
        run: npm run build

      - name: Run accessibility tests
        run: npm run test:a11y
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:8080

      - name: Upload accessibility report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: accessibility-report
          path: e2e/accessibility-report/

  # Bundle size check
  bundle-size:
    name: Bundle Size Check
    runs-on: ubuntu-latest
    needs: quality

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Check bundle size
        run: npm run bundle-size:check

      - name: Comment bundle size on PR
        if: github.event_name == 'pull_request'
        uses: andresz1/size-limit-action@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

  # Security scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: quality

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=high

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # Final status check
  tests-complete:
    name: All Tests Complete
    runs-on: ubuntu-latest
    needs: [quality, test-unit, coverage, test-e2e, accessibility, bundle-size, security]
    if: always()

    steps:
      - name: Check test results
        run: |
          if [[ "${{ needs.quality.result }}" != "success" ]]; then
            echo "❌ Quality checks failed"
            exit 1
          fi

          if [[ "${{ needs.test-unit.result }}" != "success" ]]; then
            echo "❌ Unit tests failed"
            exit 1
          fi

          if [[ "${{ needs.coverage.result }}" != "success" ]]; then
            echo "❌ Coverage checks failed"
            exit 1
          fi

          if [[ "${{ needs.test-e2e.result }}" != "success" ]]; then
            echo "❌ E2E tests failed"
            exit 1
          fi

          if [[ "${{ needs.accessibility.result }}" != "success" ]]; then
            echo "❌ Accessibility tests failed"
            exit 1
          fi

          if [[ "${{ needs.bundle-size.result }}" != "success" ]]; then
            echo "❌ Bundle size check failed"
            exit 1
          fi

          if [[ "${{ needs.security.result }}" != "success" ]]; then
            echo "❌ Security scan failed"
            exit 1
          fi

          echo "✅ All tests passed successfully!"

      - name: Update commit status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const status = '${{ job.status }}' === 'success' ? 'success' : 'failure';
            const description = status === 'success'
              ? '✅ All quality gates passed'
              : '❌ Some quality gates failed';

            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.payload.pull_request.head.sha,
              state: status,
              description: description,
              context: 'Testing Pipeline'
            });